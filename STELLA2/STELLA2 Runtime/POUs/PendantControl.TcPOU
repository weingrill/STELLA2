<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PendantControl" Id="{4c9494b1-b987-44f6-88ae-faae341979f2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PendantControl
VAR
	// program selection of the pendant control
	Selection:	UINT;
	// error on the pendant control
	Error:		BOOL;
	// manual switch
	manual:		BOOL;
	//enable button
	enable:		BOOL;
	//reset button
	reset:		BOOL;
	// up button
	up:			BOOL;
	// down button
	down:		BOOL;
	// left button
	left:		BOOL;
	// right button
	right:		BOOL;
	lamp_left:		BOOL;
	lamp_right:		BOOL;
	lamp_up:		BOOL;
	lamp_down:		BOOL;
	lamp_error:		BOOL;
	horn:			BOOL;
	// counter for filter position
	Filter_position:	USINT;
	FocusEnable: 		FB_ButtonEnable;
	DerotatorEnable:	FB_ButtonEnable;
	ElevationEnable: 	FB_ButtonEnable;
	AzimuthEnable: 		FB_ButtonEnable;
	FilterWheelEnable:	FB_ButtonEnable;
	TelescopeControlEnable: 	FB_ButtonEnable;
	HydraulicsEnable: 	FB_ButtonEnable;
	TrackingEnable:			FB_ButtonEnable;
	ResetDelay:	TON;
	TwinCATRestart: TC_Restart;
	up_trigger:	R_TRIG;
	down_trigger:	R_TRIG;	
	// manual or automatic operation of the telescope
	telescope_mode : E_TelescopeMode;	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 
This program is responsible for the manual control of the telescope.
all movable parts can be controlled from here. This is mainly for testing and
maintenance.
WARNING! Some of the safety routines are disabled, when operating the telescope manually.
*)
// calculate the value of the selector
Selection := 1*BOOL_TO_UINT(GVL_pendant_control.BCD1) + 
			 2*BOOL_TO_UINT(GVL_pendant_control.BCD2) + 
			 4*BOOL_TO_UINT(GVL_pendant_control.BCD4) +
			 8*BOOL_TO_UINT(GVL_pendant_control.BCD8);

// detect disconnection of the manual controls (should also trigger emergency stop).			 
Error := (Selection = 0);

// disable all the lamps
lamp_left := FALSE;
lamp_right := FALSE;
lamp_up := FALSE;
lamp_down := FALSE;
horn := FALSE;

// clooect the state of all buttons
manual := GVL_pendant_control.key_switch;
enable := GVL_pendant_control.start_switch;
reset := GVL_pendant_control.reset_switch;
up := GVL_pendant_control.direction_up;
down := GVL_pendant_control.direction_down;
left := GVL_pendant_control.direction_left;
right := GVL_pendant_control.direction_right;

up_trigger(CLK := up);
down_trigger(CLK := down);
//R_Enable(CLK := enable);
// the error lamp is the same as the error lamp of the main panel
lamp_error := GVL_Main.lamp_error;
CoverControl.active_cover := 0;


// determine the operation of the telescope based on the switch set
IF manual THEN
	telescope_mode := E_TelescopeMode.manual;
ELSE
	telescope_mode := E_TelescopeMode.automatic;
END_IF

// enable only the selected item and connect lamps and buttons accordingly
CASE Selection OF
	1:	// reserved for Cover1 control
		lamp_up := GVL_Telescope.cover1_open;
		lamp_down := GVL_Telescope.cover1_closed;
		IF manual THEN
			//CoverEnable(SET := enable, Q := CoverControl.enable);
			//CoverControl.active_cover := 1;
			//CoverControl.reset := reset;
			GVL_Telescope.open_cover1 := up AND GVL_Telescope.cover1_open;
			GVL_Telescope.close_cover1 := down AND GVL_Telescope.cover1_closed;
			lamp_error := CoverControl.Cover1_Error;	
		ELSE
			IF down THEN 
				CoverControl.close := TRUE;
			END_IF
			IF up THEN
				CoverControl.open := TRUE;
			END_IF		
		END_IF

	2: // Cover2 control
		lamp_up := GVL_Telescope.cover2_open;
		lamp_down := GVL_Telescope.cover2_closed;
		IF manual THEN
			//CoverEnable(SET := enable, Q := CoverControl.enable);
			//CoverControl.active_cover := 2;
			GVL_Telescope.open_cover2 := up AND GVL_Telescope.cover2_open;
			GVL_Telescope.close_cover2 := down AND GVL_Telescope.cover2_closed;
			lamp_error := CoverControl.Cover2_Error;
		ELSE
			IF down THEN 
				CoverControl.close := TRUE;
			END_IF
			IF up THEN
				CoverControl.open := TRUE;
			END_IF		
		END_IF
 	
	3:  // Cover3 control
		lamp_up := GVL_Telescope.cover3_open;
		lamp_down := GVL_Telescope.cover3_closed;
		IF manual THEN
			//CoverEnable(SET := enable, Q := CoverControl.enable);
			//CoverControl.active_cover := 3;
			GVL_Telescope.open_cover3 := up AND GVL_Telescope.cover3_open;
			GVL_Telescope.close_cover3 := down AND GVL_Telescope.cover3_closed;
			//CoverControl.reset := reset;
			lamp_error := CoverControl.Cover3_Error;
		ELSE
			IF down THEN 
				CoverControl.close := TRUE;
			END_IF
			IF up THEN
				CoverControl.open := TRUE;
			END_IF		
		END_IF
		
	4:	// Nasmyth / mirror M3 control
		
		
	5:	// Focus Control
		
							
	6:	// Derotator control
		
							
	7:	// Elevation Control
		
		ElevationControl.up := up AND GVL_Telescope.Elevation_inputs.0;
		ElevationControl.down := down AND GVL_Telescope.Elevation_inputs.1;
		IF manual THEN
			ElevationEnable(
				SET := enable, 
				Q := ElevationControl.enable);	
		END_IF
		ElevationControl.reset := reset;
		lamp_up := GVL_Telescope.Elevation_inputs.0;
		lamp_down := GVL_Telescope.Elevation_inputs.1;
		lamp_error := ElevationControl.error;
		
	8:	// Azimuth Control
		lamp_left := GVL_Telescope.Azimuth_inputs.0; // NOT GVL_Telescope.azimut_limit_switch;
		lamp_right := GVL_Telescope.Azimuth_inputs.1; // NOT GVL_Telescope.azimut_limit_switch;
		AzimuthElevationControl.left := left AND GVL_Telescope.Azimuth_inputs.0;
		AzimuthElevationControl.right := right AND GVL_Telescope.Azimuth_inputs.1;
		AzimuthElevationControl.reset := reset;
		IF manual THEN
			AzimuthEnable(
				SET := enable, 
				Q := AzimuthElevationControl.enable);
			lamp_error := AzimuthElevationControl.error;
		END_IF
		
	9: 	// Dome control
		
		
		
	10:	// FilterWheel control
		
	11: lamp_up := ElevationControl.elevation_torque > 0.0;
		lamp_down := ElevationControl.elevation_torque < 0.0;
		
	12:	// manual Telescope Control
		IF manual THEN
			lamp_up := TelescopeControl.power;
			lamp_down := TelescopeControl.power;
			lamp_left := TelescopeControl.power;
			lamp_right := TelescopeControl.power;
	
			TelescopeControl.gohome := down;
			TelescopeControl.park := up;
			TelescopeControl.goto := right;
			TrackingEnable(SET := enable, 
							RESET := reset, 
							Q := TelescopeControl.track);
			TelescopeControl.reset := reset;
			Telescopecontrol.stop := left;	
			lamp_error := Telescopecontrol.error;
		END_IF
		
	13: // Telescope Control
		TelescopeControlEnable(
			SET := enable, 
			Q := TelescopeControl.power);
		TelescopeControl.reset := reset;
		IF manual THEN
			lamp_up := GVL_Telescope.Elevation_inputs.0;
			lamp_down := GVL_Telescope.Elevation_inputs.1;
			lamp_left := GVL_Telescope.Azimuth_inputs.0;
			lamp_right := GVL_Telescope.Azimuth_inputs.1;
			ElevationControl.up := up AND GVL_Telescope.Elevation_inputs.0;
			ElevationControl.down := down AND GVL_Telescope.Elevation_inputs.1;
			AzimuthElevationControl.left := left AND GVL_Telescope.Azimuth_inputs.0;
			AzimuthElevationControl.right := right AND GVL_Telescope.Azimuth_inputs.1;
			TelescopeControl.rightascension := TelescopeControl.rightascension_calc;
			TelescopeControl.declination := TelescopeControl.declination_calc;
		ELSE
			lamp_up := ElevationControl.enable;
			lamp_down := ElevationControl.enable;
			lamp_left := AzimuthElevationControl.enable;
			lamp_right := AzimuthElevationControl.enable;
			IF up THEN 
				Telescopecontrol.elevation_offset := Telescopecontrol.elevation_offset + 10.0/3600.0; 
			ELSIF down THEN 
				Telescopecontrol.elevation_offset := Telescopecontrol.elevation_offset - 10.0/3600.0; 
			END_IF;
			IF left THEN 
				Telescopecontrol.azimuth_offset := Telescopecontrol.azimuth_offset - 10.0/3600.0; 
			ELSIF right THEN 
				Telescopecontrol.azimuth_offset := Telescopecontrol.azimuth_offset + 10.0/3600.0; 
			END_IF;
		END_IF
		ResetDelay(IN := reset, PT := T#3S);
		// wait for suction pump to stop
		TwinCATRestart(NETID := '', RESTART := ResetDelay.Q AND NOT HydraulicsControl.suction_running, TMOUT := T#60S);
	
	14: horn := manual;
		lamp_up := manual;
		lamp_down := manual;
		lamp_left := manual;
		lamp_right := manual;
	
	15:	// Hydraulics control
		lamp_up := HydraulicsControl.oil_pressure_OK AND Hydraulicscontrol.brake_closed;
		lamp_down := HydraulicsControl.oil_pressure_OK AND Hydraulicscontrol.brake_open;
		lamp_left := HydraulicsControl.pump_running;
		lamp_right := HydraulicsControl.suction_running;
		IF manual THEN
			HydraulicsEnable(
				SET := enable, 
				Q := Hydraulicscontrol.enable);
			Hydraulicscontrol.reset := reset;
			
			IF up THEN
				Hydraulicscontrol.open_brake();
			END_IF
			IF down THEN
				Hydraulicscontrol.close_brake();
			END_IF
			Hydraulicscontrol.suction_manual := right;
			Hydraulicscontrol.pump_manual_stop := left;
			lamp_error := HydraulicsControl.error;
		END_IF
END_CASE

// set all the lamps
GVL_pendant_control.lamp_left := lamp_left;
GVL_pendant_control.lamp_right := lamp_right;
GVL_pendant_control.lamp_up := lamp_up;
GVL_pendant_control.lamp_down := lamp_down;
GVL_pendant_control.lamp_error := lamp_error;]]></ST>
    </Implementation>
    <LineIds Name="PendantControl">
      <LineId Id="3217" Count="29" />
      <LineId Id="3548" Count="0" />
      <LineId Id="3247" Count="0" />
      <LineId Id="3549" Count="0" />
      <LineId Id="3248" Count="3" />
      <LineId Id="3595" Count="7" />
      <LineId Id="3594" Count="0" />
      <LineId Id="3252" Count="58" />
      <LineId Id="3322" Count="2" />
      <LineId Id="3333" Count="2" />
      <LineId Id="3344" Count="33" />
      <LineId Id="3394" Count="1" />
      <LineId Id="3646" Count="0" />
      <LineId Id="3396" Count="70" />
      <LineId Id="3468" Count="2" />
      <LineId Id="3472" Count="2" />
      <LineId Id="3476" Count="11" />
      <LineId Id="121" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>